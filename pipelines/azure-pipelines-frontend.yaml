trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - frontend/*

variables:
  acrName: 'oemselleracr'

stages:
- stage: Build
  displayName: Build and Push Frontend
  jobs:
  - job: BuildFrontend
    displayName: Build React Application
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: NodeTool@0
      displayName: 'Use Node.js 18.x'
      inputs:
        versionSpec: '18.x'

    - script: |
        cd frontend/oem-seller-web
        npm ci
      displayName: 'Install dependencies'

    - script: |
        cd frontend/oem-seller-web
        npm run build
      displayName: 'Build React app'

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: 'oemselleracr-connection'
        repository: 'oem-seller-web'
        command: 'build'
        Dockerfile: 'frontend/oem-seller-web/Dockerfile'
        buildContext: 'frontend/oem-seller-web'
        tags: |
          $(Build.BuildId)
          latest

    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        containerRegistry: 'oemselleracr-connection'
        repository: 'oem-seller-web'
        command: 'push'
        tags: |
          $(Build.BuildId)
          latest

- stage: Deploy
  displayName: Deploy Frontend
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - deployment: DeployFrontend
    displayName: Deploy Frontend to AKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'oem-seller-production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: 'Deploy Frontend'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'oem-seller-aks-connection'
              namespace: 'oem-seller'
              manifests: |
                infrastructure/manifests/frontend-deployment.yaml
                infrastructure/manifests/frontend-service.yaml