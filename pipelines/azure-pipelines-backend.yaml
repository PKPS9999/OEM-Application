trigger:
  branches:
    include:
    - main
    - develop
  paths:
    include:
    - backend/*

variables:
  acrName: 'oemselleracr'
  resourceGroup: 'oem-seller-rg'
  aksCluster: 'oem-seller-aks'

stages:
- stage: Build
  displayName: Build and Push
  jobs:
  - job: BuildMicroservices
    displayName: Build All Microservices
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        OEMProductService:
          serviceName: 'OEMProductService'
        UserManagementService:
          serviceName: 'UserManagementService'
        OrderManagementService:
          serviceName: 'OrderManagementService'
        PaymentService:
          serviceName: 'PaymentService'
        InventoryService:
          serviceName: 'InventoryService'
        ShippingService:
          serviceName: 'ShippingService'
        NotificationService:
          serviceName: 'NotificationService'
        ReportingService:
          serviceName: 'ReportingService'
        AuthenticationService:
          serviceName: 'AuthenticationService'
        ISOComplianceService:
          serviceName: 'ISOComplianceService'
        AuditService:
          serviceName: 'AuditService'
        ConfigurationService:
          serviceName: 'ConfigurationService'
        FileStorageService:
          serviceName: 'FileStorageService'
        EmailService:
          serviceName: 'EmailService'
        SearchService:
          serviceName: 'SearchService'
        ReviewService:
          serviceName: 'ReviewService'
        AnalyticsService:
          serviceName: 'AnalyticsService'
        SupplierService:
          serviceName: 'SupplierService'
        QualityAssuranceService:
          serviceName: 'QualityAssuranceService'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET 8 SDK'
      inputs:
        packageType: 'sdk'
        version: '8.x'

    - task: DotNetCoreCLI@2
      displayName: 'Build $(serviceName)'
      inputs:
        command: 'build'
        projects: 'backend/$(serviceName)/*.csproj'
        arguments: '--configuration Release'

    - task: Docker@2
      displayName: 'Build Docker image'
      inputs:
        containerRegistry: 'oemselleracr-connection'
        repository: '$(serviceName)'
        command: 'build'
        Dockerfile: 'backend/$(serviceName)/Dockerfile'
        buildContext: 'backend/$(serviceName)'
        tags: |
          $(Build.BuildId)
          latest

    - task: Docker@2
      displayName: 'Push Docker image'
      inputs:
        containerRegistry: 'oemselleracr-connection'
        repository: '$(serviceName)'
        command: 'push'
        tags: |
          $(Build.BuildId)
          latest

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - deployment: DeployToAKS
    displayName: Deploy to AKS
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'oem-seller-production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: 'Deploy to Kubernetes'
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: 'oem-seller-aks-connection'
              namespace: 'oem-seller'
              manifests: |
                infrastructure/manifests/*.yaml