trigger:
  branches:
    include:
    - main
  paths:
    include:
    - infrastructure/terraform/*

variables:
  terraformVersion: '1.5.0'

stages:
- stage: Validate
  displayName: Terraform Validate
  jobs:
  - job: TerraformValidate
    displayName: Validate Terraform
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '$(terraformVersion)'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'infrastructure/terraform'
        backendServiceArm: 'azure-service-connection'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: 'infrastructure/terraform'
        environmentServiceNameAzureRM: 'azure-service-connection'

- stage: Deploy
  displayName: Terraform Deploy
  dependsOn: Validate
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'main'))
  jobs:
  - deployment: TerraformDeploy
    displayName: Deploy Infrastructure
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'oem-seller-infrastructure'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: TerraformTaskV3@3
            displayName: 'Terraform Apply'
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: 'infrastructure/terraform'
              environmentServiceNameAzureRM: 'azure-service-connection'
              commandOptions: '-auto-approve' 